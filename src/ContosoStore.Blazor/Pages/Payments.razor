@page "/payments"
@using Volo.Abp.Application.Dtos
@using ContosoStore.Payments
@using ContosoStore.Localization
@using Microsoft.Extensions.Localization
@using Volo.Abp
@using Volo.Abp.AspNetCore.Components.Web;
@inject IStringLocalizer<ContosoStoreResource> L
@inject AbpBlazorMessageLocalizerHelper<ContosoStoreResource> LH
@inherits AbpCrudPageBase<IPaymentAppService, PaymentDto, Guid, PagedAndSortedResultRequestDto, CreateUpdatePaymentDto>

<Card>
    <CardHeader>
        <Row Class="justify-content-between">
            <Column ColumnSize="ColumnSize.IsAuto">
                <h2>@L["Payments"]</h2>
            </Column>
            <Column ColumnSize="ColumnSize.IsAuto">
                <Button Color="Color.Primary"
                        Clicked="OpenCreateModalAsync">
                    @L["NewPayment"]
                </Button>
            </Column>
        </Row>
    </CardHeader>

    <CardBody>
        <DataGrid TItem="PaymentDto"
                  Data="Entities"
                  ReadData="OnDataGridReadAsync"
                  TotalItems="TotalCount"
                  ShowPager="true"
                  PageSize="PageSize">
            <DataGridColumns>
                <DataGridColumn TItem="PaymentDto"
                                Field="@nameof(PaymentDto.Reference)"
                                Caption="@L["Reference"]">
                </DataGridColumn>
                
                <DataGridColumn TItem="PaymentDto"
                                Field="@nameof(PaymentDto.CustomerName)"
                                Caption="@L["Customer"]">
                </DataGridColumn>

                <DataGridColumn TItem="PaymentDto"
                                Field="@nameof(PaymentDto.Naration)"
                                Caption="@L["Naration"]">
                </DataGridColumn>

                <DataGridColumn TItem="PaymentDto"
                                Field="@nameof(PaymentDto.CreationTime)"
                                Caption="@L["CreationTime"]">
                    <DisplayTemplate>
                        @context.CreationTime.ToLongDateString()
                    </DisplayTemplate>
                </DataGridColumn>

                <DataGridEntityActionsColumn TItem="PaymentDto" @ref="@EntityActionsColumn">
                    <DisplayTemplate>
                        <EntityActions TItem="PaymentDto" EntityActionsColumn="@EntityActionsColumn">
                            <EntityAction TItem="PaymentDto"
                                          Text="@L["Edit"]"
                                          Clicked="() => OpenEditModalAsync(context)" />

                            <EntityAction TItem="PaymentDto"
                                          Text="@L["Delete"]"
                                          Clicked="() => DeleteEntityAsync(context)"
                                          ConfirmationMessage="() => GetDeleteConfirmationMessage(context)" />

                        </EntityActions>
                    </DisplayTemplate>
                </DataGridEntityActionsColumn>
            </DataGridColumns>
        </DataGrid>
    </CardBody>
</Card>

<!--create modal-->
<Modal @ref="@CreateModal">
    <ModalBackdrop />
    <ModalContent IsCentered="true">
        <Form>
            <ModalHeader>
                <ModalTitle>@L["NewPayment"]</ModalTitle>
                <CloseButton Clicked="CloseCreateModalAsync"/>
            </ModalHeader>
            <ModalBody>
                <Validations @ref="@CreateValidationsRef" Model="@NewEntity" ValidateOnLoad="false">
                    <Blazorise.Field>
                        <FieldLabel>@L["Customer"]</FieldLabel>
                        <Select TValue="Guid" @bind-SelectedValue="@NewEntity.CustomerId">
                            @foreach (var customer in customerList)
                            {
                                <SelectItem TValue="Guid" Value="@customer.Id">
                                    @customer.Name
                                </SelectItem>
                            }
                        </Select>
                    </Blazorise.Field>

                    <Validation MessageLocalizer="@LH.Localize">
                        <Blazorise.Field>
                            <FieldLabel>@L["Reference"]</FieldLabel>
                            <TextEdit @bind-Text="@NewEntity.Reference">
                                <Feedback>
                                    <ValidationError/>
                                </Feedback>
                            </TextEdit>
                        </Blazorise.Field>
                    </Validation>
                    <Blazorise.Field>
                        <FieldLabel>@L["PaymentDate"]</FieldLabel>
                        <DateEdit TValue="DateTime" @bind-Date="NewEntity.PaymentDate"/>
                    </Blazorise.Field>
                    <Blazorise.Field>
                        <FieldLabel>@L["Naration"]</FieldLabel>
                        <TextEdit @bind-Text="@NewEntity.Naration"/>
                    </Blazorise.Field>
                </Validations>
            </ModalBody>
            <ModalFooter>
                <Button Color="Color.Secondary"
                        Clicked="CloseCreateModalAsync">@L["Cancel"]</Button>
                <Button Color="Color.Primary"
                        Type="@ButtonType.Submit"
                        PreventDefaultOnSubmit="true"
                        Clicked="CreateEntityAsync">@L["Save"]</Button>
            </ModalFooter>
        </Form>
    </ModalContent>
</Modal>

<!--Edit modal-->
<Modal @ref="@EditModal">
    <ModalBackdrop />
    <ModalContent IsCentered="true">
        <Form>
            <ModalHeader>
                <ModalTitle>@EditingEntity.Reference</ModalTitle>
                <CloseButton Clicked="CloseEditModalAsync"/>
            </ModalHeader>
            <ModalBody>
                <Validations @ref="@EditValidationsRef" Model="@NewEntity" ValidateOnLoad="false">
                    <Blazorise.Field>
                        <FieldLabel>@L["Customer"]</FieldLabel>
                        <Select TValue="Guid" @bind-SelectedValue="@EditingEntity.CustomerId">
                            @foreach (var customer in customerList)
                            {
                                <SelectItem TValue="Guid" Value="@customer.Id">
                                    @customer.Name
                                </SelectItem>
                            }
                        </Select>
                    </Blazorise.Field>

                    <Validation MessageLocalizer="@LH.Localize">
                        <Blazorise.Field>
                            <FieldLabel>@L["Reference"]</FieldLabel>
                            <TextEdit @bind-Text="@EditingEntity.Reference">
                                <Feedback>
                                    <ValidationError/>
                                </Feedback>
                            </TextEdit>
                        </Blazorise.Field>
                    </Validation>
                    <Blazorise.Field>
                        <FieldLabel>@L["PaymentDate"]</FieldLabel>
                        <DateEdit TValue="DateTime" @bind-Date="EditingEntity.PaymentDate"/>
                    </Blazorise.Field>
                    <Validation MessageLocalizer="@LH.Localize">
                        <Blazorise.Field>
                            <FieldLabel>@L["Naration"]</FieldLabel>
                            <TextEdit @bind-Text="@EditingEntity.Naration">
                                <Feedback>
                                    <ValidationError />
                                </Feedback>
                            </TextEdit>
                        </Blazorise.Field>
                    </Validation>
                </Validations>
            </ModalBody>
            <ModalFooter>
                <Button Color="Color.Secondary"
                        Clicked="CloseEditModalAsync">@L["Cancel"]</Button>
                <Button Color="Color.Primary"
                        Type="@ButtonType.Submit"
                        PreventDefaultOnSubmit="true"
                        Clicked="UpdateEntityAsync">@L["Save"]</Button>
            </ModalFooter>
        </Form>
    </ModalContent>
</Modal>

@code
{
    //ADDED A NEW FIELD
    IReadOnlyList<CustomerLookupDto> customerList = Array.Empty<CustomerLookupDto>();

    public Payments() // Constructor
    {
       
    }

    //GET CUSTOMERS ON INITIALIZATION
    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        customerList = (await AppService.GetCustomerLookupAsync()).Items;
    }

    protected override async Task OpenCreateModalAsync()
    {
        if (!customerList.Any())
        {
            throw new UserFriendlyException(message: L["ACustomerIsRequiredForCreatingPayment"]);
        }

        await base.OpenCreateModalAsync();
        NewEntity.CustomerId = customerList.First().Id;
    }
}